@model User
@{
    ViewData["Title"] = "تتبع المصاريف";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<body dir="rtl">

<a class="btn btn-primary" style="bottom: 3%; font-size: x-large; position: fixed; right: 5%;"
   asp-controller="Budget" asp-action="CreateOperation">
    <i class="bi bi-plus-square-dotted"></i>
</a>

<div class="mt-4 container">
<div class="row">
    <div class="col-6">
        <h1 class="unselectable">
            تتبع المصاريف
        </h1>
    </div>
    <div class="col-6 text-start text-primary">
        <h1 class="h1">
            @Math.Round(Model.Bank.Balance, 2)
            <i class="bi bi-wallet2"></i>
        </h1>
    </div>
</div>

@* last opreations *@

<br/> <br/>
<div class="row">
    <h5 class="text-end text-info">
        اخر العمليات
        <i class="bi bi-table"></i>
    </h5>
</div>
<div class="row">
    <table class="table table-striped table-bordered">
        <tr class="table-primary">
            <th width="45%" data-toggle="tooltip" data-placement="right" title=" اضغط للتعديل">
                الوصف
                <i class="bi bi-info-circle"></i>
            </th>
            <th width="11%">
                الصنف
            </th>
            <th width="11%">
                المبلغ
                <i class="bi bi-currency-dollar"></i>
            </th>
        </tr>
        <tbody id="alwaysShownSec">

        @for (var i = 0; i < 6 && i < Model.Bank.Operations.Count; i++)
        {
            var obj = Model.Bank.Operations.OrderByDescending(x => x.CreatedDate).ToList()[i];
            <tr>
                <td data-toggle="tooltip" data-placement="right" title="@obj.CreatedDate.GetValueOrDefault(DateTime.Now)">
                    <a asp-controller="Budget" asp-action="EditOperation" asp-route-operationId="@obj.OperationId">
                        @obj.Description
                    </a>
                </td>
                <td>
                    @obj.Class
                </td>
                @if (obj.Amount > 0)
                {
                    <td>
                        +@obj.Amount
                    </td>
                }
                else
                {
                    <td>
                        @obj.Amount
                    </td>
                }
            </tr>
        }

        </tbody>
        <tbody hidden="" id="hiddenSec">
        @for (var i = 6; i < Model.Bank.Operations.Count; i++)
        {
            var obj = Model.Bank.Operations.OrderByDescending(x => x.CreatedDate).ToList()[i];
            <tr>
                <td data-toggle="tooltip" data-placement="right" title="@obj.CreatedDate.GetValueOrDefault(DateTime.Now)">
                    <a asp-controller="Budget" asp-action="EditOperation" asp-route-operationId="@obj.OperationId">
                        @obj.Description
                    </a>
                </td>
                <td>
                    @obj.Class
                </td>
                @if (obj.Amount > 0)
                {
                    <td>
                        +@obj.Amount
                    </td>
                }
                else
                {
                    <td>
                        @obj.Amount
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>
</div>

@* show more button *@
@if (Model.Bank.Operations.Count >= 7)
{
    <div class="row text-center">
        <a class="btn btn-outline-primary" id="showMoreOpBtn" onclick="SwitchMoreOp(this);">
            اظهار المزيد
            <i class="bi bi-arrow-bar-down"></i>
        </a>
    </div>
}


<br/> <br/>
@{
    var withdrawsEnumerable =
        from obj in Model.Bank.Operations
        where obj.Amount < 0
        select obj;

    var depositEnumerable =
        from obj in Model.Bank.Operations
        where obj.Amount > 0
        select obj;

    var withdrawClassesDict = new Dictionary<string, float>();

    foreach (var withdraw in withdrawsEnumerable)
    {
        if (withdrawClassesDict.ContainsKey(withdraw.Class)) {continue;}

        var classTotal = (from x in withdrawsEnumerable
            where x.Class == withdraw.Class
            select x.Amount).Sum();

        withdrawClassesDict.Add(withdraw.Class, classTotal);
    }

    var depositClassesDict = new Dictionary<string, float>();

    foreach (var deposit in depositEnumerable)
    {
        if (depositClassesDict.ContainsKey(deposit.Class)) {continue;}

        var classTotal = (from x in depositEnumerable
                          where x.Class == deposit.Class
                          select x.Amount).Sum();

        depositClassesDict.Add(deposit.Class, classTotal);
    }

    var withdrawsTotal = withdrawClassesDict.Values.Sum();
    var depositTotal = depositClassesDict.Values.Sum();
}
<div class="row">
    <h5 class="text-end text-info col-6">
        المصروفات حسب التصنيف
        <i class="bi bi-table"></i>
    </h5>
    
    <h5 class="text-start text-danger col-6">
        الإجمالي: @withdrawsTotal
    </h5>
</div>
<div class="row">
    <table class="table table-striped table-bordered">
        <tr class="table-primary">
            <th width="40%">
                الصنف
                <i class="bi bi-info-circle"></i>
            </th>
            <th width="60%">
                        المبلغ
                        <i class="bi bi-currency-dollar"></i>
            </th>
        </tr>
        <tbody>
        @{
            foreach (KeyValuePair<string, float> pair in withdrawClassesDict.OrderBy(x => x.Value))
            {
                <tr>
                    <td>
                        @pair.Key
                    </td>
                    <td>
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: @($"{pair.Value * 100 / withdrawsTotal}%");"
                                 aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
                            </div>
                            <p class="text-end">
                                &nbsp;
                                @System.Math.Abs(pair.Value)
                            </p>
                        </div>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>

<br/> <br/>
<div class="row">
    <h5 class="text-end text-info col-6">
        الدخل حسب التصنيف
        <i class="bi bi-table"></i>
    </h5>
    
    <h5 class="text-start text-success col-6">
        الإجمالي: @depositTotal
    </h5>
</div>
<div class="row">
    <table class="table table-striped table-bordered">
        <tr class="table-primary">
            <th width="40%">
                الصنف
                <i class="bi bi-info-circle"></i>
            </th>
            <th width="60%">
                        المبلغ
                        <i class="bi bi-currency-dollar"></i>
            </th>
        </tr>
        <tbody>
        @{
            foreach (KeyValuePair<string, float> pair in depositClassesDict.OrderBy(x => x.Value))
            {
                <tr>
                    <td>
                        @pair.Key
                    </td>
                    <td>
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: @($"{pair.Value * 100 / depositTotal}%");"
                                 aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
                            </div>
                            <p class="text-end">
                                &nbsp;
                                @pair.Value
                            </p>
                        </div>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>

<br /> <br />
<div class="row">
    <a class="btn btn-outline-danger" onclick="ConfirmReset();">
        حذف واعادة ضبط المصاريف
    </a>
</div>

</div>


</body>

@section Scripts
{
    <script type="text/javascript">
        $(function() {
            $('[data-toggle="tooltip"]').tooltip();
        });

        function SwitchMoreOp(btn) {

            myTBody = document.getElementById("hiddenSec");

            if (myTBody.hidden) {
                myTBody.hidden = false;
                btn.innerHTML = 'اخفاء <i class="bi bi-arrow-bar-up"></i>';
            } else {
                myTBody.hidden = true;
                btn.innerHTML = 'اظهار المزيد <i class="bi bi-arrow-bar-down"></i>';
            }
        }

        function ConfirmReset() {
            if (confirm('متاكد تبغا تحذف كل المصاريف؟')) {
                window.location.href = '@Url.Action("Reset", "Budget")';
            } else {
                // Do nothing!
            }
        }

    </script>
}